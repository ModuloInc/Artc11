import { NextResponse } from "next/server";
import { prisma } from "@/lib/db";

export async function POST(req: Request) {
    try {
        // Log pour d√©bogage
        console.log("üîπ API Vote: D√©but de la requ√™te");

        // R√©cup√©rer le body
        const body = await req.json();
        const { questionId, value } = body;
        console.log("‚úÖ Donn√©es re√ßues:", { questionId, value });

        // V√©rifier que les donn√©es sont valides
        if (!questionId) {
            console.error("‚ùå Erreur: questionId manquant");
            return NextResponse.json(
                { error: "questionId est requis" },
                { status: 400 }
            );
        }

        if (value === undefined) {
            console.error("‚ùå Erreur: value manquante");
            return NextResponse.json(
                { error: "value est requise" },
                { status: 400 }
            );
        }

        if (![1, 0, -1].includes(value)) {
            console.error("‚ùå Erreur: value incorrecte");
            return NextResponse.json(
                { error: "value doit √™tre -1, 0 ou 1" },
                { status: 400 }
            );
        }

        // R√©cup√©rer l'ID utilisateur depuis l'email stock√© dans Authorization
        const authHeader = req.headers.get('Authorization');
        console.log("üîê En-t√™te d'autorisation:", authHeader);

        if (!authHeader || !authHeader.startsWith('Bearer ')) {
            console.error("‚ùå Erreur: En-t√™te d'autorisation invalide");
            return NextResponse.json(
                { error: "Authentification requise" },
                { status: 401 }
            );
        }

        const email = authHeader.substring(7);
        console.log("üìß Email extrait:", email);

        // V√©rifier si l'utilisateur existe
        const user = await prisma.user.findUnique({
            where: { email },
            select: { id: true }
        });

        if (!user) {
            console.error("‚ùå Erreur: Utilisateur non trouv√© pour l'email:", email);
            return NextResponse.json(
                { error: "Utilisateur non trouv√©" },
                { status: 404 }
            );
        }

        const userId = user.id;
        console.log("‚úÖ Utilisateur trouv√©, ID:", userId);

        // V√©rifier que la question existe
        const question = await prisma.question.findUnique({
            where: { id: questionId }
        });

        if (!question) {
            console.error("‚ùå Erreur: Question non trouv√©e avec ID:", questionId);
            return NextResponse.json(
                { error: "Question non trouv√©e" },
                { status: 404 }
            );
        }

        console.log("‚úÖ Question trouv√©e");

        // V√©rifier si l'utilisateur a d√©j√† vot√© pour cette question
        const existingVote = await prisma.vote.findUnique({
            where: {
                userId_questionId: {
                    userId: userId,
                    questionId: questionId
                }
            }
        });

        let vote;

        if (existingVote) {
            // Mettre √† jour le vote existant
            console.log("üîÑ Mise √† jour du vote existant:", existingVote.id);
            vote = await prisma.vote.update({
                where: {
                    id: existingVote.id,
                },
                data: {
                    value: value,
                },
            });
        } else {
            // Cr√©er un nouveau vote
            console.log("‚ûï Cr√©ation d'un nouveau vote");
            vote = await prisma.vote.create({
                data: {
                    value: value,
                    userId: userId,
                    questionId: questionId,
                },
            });
        }

        console.log("‚úÖ Op√©ration r√©ussie, vote:", vote);
        return NextResponse.json(vote, { status: 201 });
    } catch (error) {
        console.error("‚ùå Erreur lors de la cr√©ation du vote:", error);
        return NextResponse.json(
            { error: "Erreur serveur" },
            { status: 500 }
        );
    } finally {
        await prisma.$disconnect();
    }
}